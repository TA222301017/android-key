package in.nspheresolutions;

import androidx.annotation.NonNull;

import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.module.annotations.ReactModule;

import java.security.NoSuchAlgorithmException;

@ReactModule(name = CryptoAesCbcModule.NAME)
public class CryptoAesCbcModule extends ReactContextBaseJavaModule {
    public static final String NAME = "CryptoAesCbc";
    private final ReactApplicationContext reactContext;

    public CryptoAesCbcModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;

    }

    @Override
    @NonNull
    public String getName() {
        return NAME;
    }

    @ReactMethod
    public void encryptInHex(String iv, String secretKey, String text, String padding, Promise promise) {
        MCrypt mCrypt = new MCrypt(iv, secretKey, padding);
        String encrypted = "";
        try {
            encrypted = mCrypt.encrypt(text);
        } catch (Exception ignored) {
        }
        promise.resolve(encrypted);
    }

    @ReactMethod
    public void decryptByHex(String iv, String secretKey, String text, String padding, Promise promise) {
        MCrypt mCrypt = new MCrypt(iv, secretKey, padding);
        String decrypted = "";
        try {
            decrypted = mCrypt.decrypt(text);
        } catch (Exception ignored) {
        }
        promise.resolve(decrypted);
    }

    @ReactMethod
    public void encryptInBase64(String iv, String secretKey, String text, String padding, Promise promise) {
        MCrypt mCrypt = new MCrypt(iv, secretKey, padding);
        String encrypted = "";
        try {
            encrypted = mCrypt.encryptBase64(text);
        } catch (Exception ignored) {
        }
        promise.resolve(encrypted);
    }

    @ReactMethod
    public void decryptByBase64(String iv, String secretKey, String text, String padding, Promise promise) {
        MCrypt mCrypt = new MCrypt(iv, secretKey, padding);
        String decrypted = "";
        try {
            decrypted = mCrypt.decryptBase64(text);
        } catch (Exception ignored) {
        }
        promise.resolve(decrypted);
    }

    @ReactMethod
    public void sha256(String text, Promise promise) {
        MCrypt mCrypt = new MCrypt();
        String decrypted = "";
        try {
            decrypted = mCrypt.getSHA(text);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        promise.resolve(decrypted);
    }
    
    @ReactMethod
    public void multiply(int a, int b, Promise promise) {
        promise.resolve(a * b*5);
    }
}
