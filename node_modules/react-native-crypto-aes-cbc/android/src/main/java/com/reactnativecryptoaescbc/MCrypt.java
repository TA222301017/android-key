package in.nspheresolutions;

import android.annotation.SuppressLint;
import android.util.Base64;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

class MCrypt {

  private IvParameterSpec ivspec;
  private SecretKeySpec keyspec;
  private Cipher cipher;

  MCrypt(String iv, String secretKey, String padding) {
    ivspec = new IvParameterSpec(decodeBase64(iv).getBytes());
    keyspec = new SecretKeySpec(decodeBase64(secretKey).getBytes(), "AES");

    try {
      if (padding.equals("128"))
        cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
      else cipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
    } catch (NoSuchAlgorithmException | NoSuchPaddingException ignored) {
    }
  }

  MCrypt() {

  }

  @SuppressLint("NewApi")
  String encrypt(String text) throws Exception {
    if (text == null || text.length() == 0)
      throw new Exception("Empty string");
    byte[] encrypted;
    try {
      cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);
      encrypted = cipher.doFinal(text.getBytes(StandardCharsets.UTF_8));
    } catch (Exception e) {
      throw new Exception("[encrypt] " + e.getMessage());
    }

    return bytesToHex(encrypted);
  }

  @SuppressLint("NewApi")
  String encryptBase64(String text) throws Exception {
    if (text == null || text.length() == 0)
      throw new Exception("Empty string");
    byte[] encrypted;
    try {
      cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);
      encrypted = cipher.doFinal(text.getBytes(StandardCharsets.UTF_8));
    } catch (Exception e) {
      throw new Exception("[encrypt] " + e.getMessage());
    }

    return Base64.encodeToString(encrypted, Base64.DEFAULT);
  }

  @SuppressLint("NewApi")
  String decrypt(String code) throws Exception {
    if (code == null || code.length() == 0)
      throw new Exception("Empty string");

    byte[] decrypted;

    try {
      cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);

      decrypted = cipher.doFinal(hexToBytes(code));
    } catch (Exception e) {
      throw new Exception("[decrypt] " + e.getMessage());
    }
    return new String(decrypted, StandardCharsets.UTF_8);
  }

  @SuppressLint("NewApi")
  String decryptBase64(String code) throws Exception {
    if (code == null || code.length() == 0)
      throw new Exception("Empty string");

    byte[] decrypted;

    try {
      byte[] encryted_bytes = Base64.decode(code, Base64.DEFAULT);
      cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);

      decrypted = cipher.doFinal(encryted_bytes);
    } catch (Exception e) {
      throw new Exception("[decrypt] " + e.getMessage());
    }
    return new String(decrypted, StandardCharsets.UTF_8);
  }


  private String bytesToHex(byte[] data) {
    if (data == null) {
      return null;
    }
    StringBuilder str = new StringBuilder();
    for (byte datum : data) {
      if ((datum & 0xFF) < 16)
        str.append("0").append(Integer.toHexString(datum & 0xFF));
      else
        str.append(Integer.toHexString(datum & 0xFF));
    }
    return str.toString();
  }


  private static byte[] hexToBytes(String str) {
    if (str == null) {
      return null;
    } else if (str.length() < 2) {
      return null;
    } else {
      int len = str.length() / 2;
      byte[] buffer = new byte[len];
      for (int i = 0; i < len; i++) {
        buffer[i] = (byte) Integer.parseInt(str.substring(i * 2, i * 2 + 2), 16);
      }
      return buffer;
    }
  }

  @SuppressLint("NewApi")
  private String decodeBase64(String coded) {
    byte[] valueDecoded = Base64.decode(coded.getBytes(StandardCharsets.UTF_8), Base64.DEFAULT);
    return new String(valueDecoded);
  }

  @SuppressLint("NewApi")
  String getSHA(String input) throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance("SHA-256");
    return bytesToHex(md.digest(input.getBytes(StandardCharsets.UTF_8)));
  }

}
