//
//  Constants.swift
//  CryptoAesCbc
//
//  Created by Sachin Agrawal on 08/05/21.
//  Copyright Â© 2021 Facebook. All rights reserved.
//

import Foundation
import CommonCrypto
import CryptoSwift
struct Constants {
    static func aesEncrypt(data: String,key:String,iv:String,padding:String) -> String {
        let value = data.data(using: .utf8)!
        let encrypted = try! AES(key: toBase64(data: key), iv: toBase64(data:iv), padding:padding == "128" ? Padding.pkcs5 : Padding.pkcs7 ).encrypt([UInt8](value))
        let encryptedData = Data(encrypted)
        
        return encryptedData.toHexString()
    }
    static func aesEncryptBase64(data: String,key:String,iv:String,padding:String) -> String {
        let value = data.data(using: .utf8)!
        let encrypted = try! AES(key: toBase64(data: key), iv: toBase64(data:iv), padding:padding == "128" ? Padding.pkcs5 : Padding.pkcs7 ).encrypt([UInt8](value))
        let encryptedData = Data(encrypted)
        return encryptedData.base64EncodedString()
    }
    static func toBase64(data:String) -> String {
        
        if let data = Data(base64Encoded: data, options: .ignoreUnknownCharacters) {
            return String(data: data, encoding: .utf8)!
        }
        return ""
    }
    static func decryptBase64(data: String,key:String,iv:String,padding:String) -> String {
        let decodedData = Data(base64Encoded: data)!.bytes
        let decrypted: [UInt8] = try! AES(key: toBase64(data:key), iv: toBase64(data:iv), padding: padding == "128" ? Padding.pkcs5 : Padding.pkcs7 ).decrypt(decodedData)
        let result = String(bytes: decrypted, encoding: String.Encoding.utf8)!
        return result
    }
    static func decryptHex(data: String,key:String,iv:String,padding:String) -> String {
        let decrypted: [UInt8] = try! AES(key: toBase64(data:key), iv: toBase64(data:iv), padding: padding == "128" ? Padding.pkcs5 : Padding.pkcs7).decrypt(Array<UInt8>(hex: data))
        let result = String(bytes: decrypted, encoding: String.Encoding.utf8)!
        return result
        
    }
    static func sha256(data: String) -> String {
        return data.sha256()
    }
}
